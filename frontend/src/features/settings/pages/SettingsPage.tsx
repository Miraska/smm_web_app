import React, { useState, useEffect } from 'react';
import { Shield, Trash2, Loader2, Palette, Bot, Save, Wand2, Radio, Settings, Key } from 'lucide-react';
import { useAuth } from '../../../hooks/useAuth';
import { ThemeToggle } from '../../../components/ThemeToggle';
import { LightThemeDemo } from '../../../components/LightThemeDemo';
import type { TelegramChannel } from '../../../types';
import axios from 'axios';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
const API_BASE_URL = '';

export const SettingsPage: React.FC = () => {
  const { authStatus, logout } = useAuth();
  const [clearingServer, setClearingServer] = useState(false);
  const [clearMessage, setClearMessage] = useState<string | null>(null);
  const [showDemo, setShowDemo] = useState(false);
  const [editingPrompt, setEditingPrompt] = useState('');
  const [savingPrompt, setSavingPrompt] = useState(false);
  const [promptMessage, setPromptMessage] = useState<string | null>(null);
  const [activeSettingsTab, setActiveSettingsTab] = useState<'general' | 'ai' | 'channels'>('general');
  const [channels, setChannels] = useState<TelegramChannel[]>([]);
  const [loadingChannels, setLoadingChannels] = useState(false);
  const [openrouterApiKey, setOpenrouterApiKey] = useState('');
  const [savingApiKey, setSavingApiKey] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadEditingSettings();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞–Ω–∞–ª–æ–≤
  useEffect(() => {
    if (activeSettingsTab === 'channels') {
      loadChannels();
    }
  }, [activeSettingsTab]);

  const loadEditingSettings = async () => {
    try {
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –ø–æ–∑–∂–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
      const defaultPrompt = '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–æ–¥–∞—é—â–∏–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.';
      setEditingPrompt(defaultPrompt);
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ OpenRouter
      const savedApiKey = localStorage.getItem('openrouter_api_key') || '';
      setOpenrouterApiKey(savedApiKey);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  const loadChannels = async () => {
    try {
      setLoadingChannels(true);
      
      // API –≤—ã–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const mockChannels: TelegramChannel[] = [
        {
          id: '-1001234567890',
          title: '–ú–æ–π –∫–∞–Ω–∞–ª',
          username: 'my_channel',
          participants_count: 1500,
          is_admin: true,
          can_post_messages: true,
        },
        {
          id: '-1001234567891',
          title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª',
          username: 'test_channel',
          participants_count: 500,
          is_admin: true,
          can_post_messages: true,
        },
        {
          id: '-1001234567892',
          title: 'SMM –∫–∞–Ω–∞–ª',
          participants_count: 2500,
          is_admin: true,
          can_post_messages: true,
        }
      ];
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      setChannels(mockChannels);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
    } finally {
      setLoadingChannels(false);
    }
  };

  const handleSaveApiKey = async () => {
    try {
      setSavingApiKey(true);
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      localStorage.setItem('openrouter_api_key', openrouterApiKey);
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setPromptMessage('API –∫–ª—é—á OpenRouter —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      setTimeout(() => setPromptMessage(null), 3000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞:', error);
      setPromptMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞');
      setTimeout(() => setPromptMessage(null), 3000);
    } finally {
      setSavingApiKey(false);
    }
  };

  const handleSavePrompt = async () => {
    try {
      setSavingPrompt(true);
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setPromptMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      setTimeout(() => setPromptMessage(null), 3000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞:', error);
      setPromptMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      setTimeout(() => setPromptMessage(null), 3000);
    } finally {
      setSavingPrompt(false);
    }
  };

  const handleClearServer = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:\n\n‚Ä¢ –í—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –í—Å–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n‚Ä¢ –í—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã\n‚Ä¢ –í—Å–µ –ø–∞–ø–∫–∏ —Å –º–µ–¥–∏–∞\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
      return;
    }

    setClearingServer(true);
    setClearMessage(null);

    try {
      // 1. –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      console.log('üßπ –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã...');
      const cleanupResponse = await axios.post(`${API_BASE_URL}/api/cleanup-media`);
      
      // 2. –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      const clearPostsResponse = await axios.delete(`${API_BASE_URL}/api/posts/clear-all`);
      
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
      console.log(`üóëÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: ${cleanupResponse.data.message}`);
      console.log(`üìä –ü–æ—Å—Ç—ã: ${clearPostsResponse.data.message}`);
      
      setClearMessage(`–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n\nüìä ${clearPostsResponse.data.message}\nüóëÔ∏è ${cleanupResponse.data.message}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      setClearMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
    } finally {
      setClearingServer(false);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
      setTimeout(() => setClearMessage(null), 8000);
    }
  };

  const settingsTabs = [
    { id: 'general' as const, name: '–û–±—â–∏–µ', icon: Settings },
    { id: 'ai' as const, name: '–ò–ò', icon: Bot },
    { id: 'channels' as const, name: '–ö–∞–Ω–∞–ª—ã', icon: Radio },
  ];

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        </p>
      </div>

      {/* Settings Tabs */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div className="flex border-b border-gray-200 dark:border-gray-700 overflow-x-auto">
          {settingsTabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveSettingsTab(tab.id)}
                className={`flex-1 min-w-0 px-3 sm:px-4 py-3 text-center transition-colors whitespace-nowrap ${
                  activeSettingsTab === tab.id
                    ? 'bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 border-b-2 border-blue-600'
                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-700'
                }`}
              >
                <div className="flex flex-col sm:flex-row items-center justify-center space-y-1 sm:space-y-0 sm:space-x-2">
                  <Icon className="w-4 h-4 shrink-0" />
                  <span className="font-medium text-xs sm:text-sm truncate">{tab.name}</span>
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {/* Tab Content */}
      {activeSettingsTab === 'general' && (
        <>
          {/* Theme Settings */}
          <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
            <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4">
              –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
            </h3>
            
            <div className="space-y-4">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0">
                <div className="flex-1 min-w-0">
                  <p className="font-medium text-gray-900 dark:text-white text-sm sm:text-base">
                    –¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                  </p>
                  <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
                  </p>
                </div>
                
                <div className="shrink-0">
                  <ThemeToggle size="md" />
                </div>
              </div>
              
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between pt-4 border-t border-gray-200 dark:border-gray-700 gap-3 sm:gap-0">
                <div className="flex-1 min-w-0">
                  <p className="font-medium text-gray-900 dark:text-white text-sm sm:text-base">
                    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                  </p>
                  <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                  </p>
                </div>
                
                <button
                  onClick={() => setShowDemo(!showDemo)}
                  className="flex items-center justify-center space-x-2 px-3 sm:px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors text-sm sm:text-base shrink-0"
                >
                  <Palette className="w-4 h-4" />
                  <span>{showDemo ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}</span>
                </button>
              </div>
            </div>
          </div>

          {/* Theme Demo */}
          {showDemo && (
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
              <LightThemeDemo />
            </div>
          )}

          {/* Account Settings */}
          {authStatus.authorized && (
            <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
              <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4">
                –ê–∫–∫–∞—É–Ω—Ç
              </h3>
              
              <div className="space-y-4">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                  <div className="flex items-center space-x-3 flex-1 min-w-0">
                    <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg shrink-0">
                      <Shield className="w-4 h-4 sm:w-5 sm:h-5 text-green-500" strokeWidth={2} />
                    </div>
                    <div className="min-w-0 flex-1">
                      <p className="font-medium text-gray-900 dark:text-white text-sm sm:text-base">
                        Telegram —Å–µ—Å—Å–∏—è
                      </p>
                      <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                        –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
                      </p>
                    </div>
                  </div>
                  
                  <button
                    onClick={logout}
                    className="bg-red-600 hover:bg-red-700 text-white px-3 sm:px-4 py-2 rounded-lg transition-colors flex items-center justify-center space-x-2 text-sm sm:text-base shrink-0"
                  >
                    <span>–í—ã–π—Ç–∏</span>
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Data Management */}
          <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
            <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
            </h3>
            
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div className="flex items-center space-x-3 flex-1 min-w-0">
                <div className="p-2 bg-red-100 dark:bg-red-900/30 rounded-lg shrink-0">
                  <Trash2 className="w-4 h-4 sm:w-5 sm:h-5 text-red-600" strokeWidth={2} />
                </div>
                <div className="min-w-0 flex-1">
                  <p className="font-medium text-gray-900 dark:text-white text-sm sm:text-base">
                    –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                  </p>
                  <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                  </p>
                </div>
              </div>
              
              <button
                onClick={handleClearServer}
                disabled={clearingServer}
                className="bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white px-3 sm:px-4 py-2 rounded-lg transition-colors flex items-center justify-center space-x-2 text-sm sm:text-base shrink-0"
              >
                {clearingServer ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Trash2 className="w-4 h-4" />
                )}
                <span>{clearingServer ? '–û—á–∏—Å—Ç–∫–∞...' : '–û—á–∏—Å—Ç–∏—Ç—å'}</span>
              </button>
            </div>
          </div>

          {/* Clear Server Success/Error Message */}
          {clearMessage && (
            <div className={`rounded-xl p-4 shadow-lg ${
              clearMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
                ? 'bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800' 
                : 'bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800'
            }`}>
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className={`font-medium mb-2 ${
                    clearMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
                      ? 'text-green-600 dark:text-green-400' 
                      : 'text-red-600 dark:text-red-400'
                  }`}>
                    {clearMessage.includes('—É—Å–ø–µ—à–Ω–æ') ? '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏'}
                  </p>
                  <pre className={`text-sm whitespace-pre-wrap ${
                    clearMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
                      ? 'text-green-700 dark:text-green-300' 
                      : 'text-red-700 dark:text-red-300'
                  }`}>
                    {clearMessage}
                  </pre>
                </div>
                <button
                  onClick={() => setClearMessage(null)}
                  className={`ml-4 hover:opacity-70 ${
                    clearMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
                      ? 'text-green-400' 
                      : 'text-red-400'
                  }`}
                >
                  √ó
                </button>
              </div>
            </div>
          )}

          {/* App Info */}
          <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
            <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4">
              –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            </h3>
            
            <div className="text-xs sm:text-sm text-gray-600 dark:text-gray-400 space-y-2">
              <p><strong>–í–µ—Ä—Å–∏—è:</strong> 1.0.0</p>
              <p><strong>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</strong> SMM Bot Team</p>
              <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SMM –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</p>
            </div>
          </div>
        </>
      )}

      {activeSettingsTab === 'ai' && (
        <>
          {/* OpenRouter API Key */}
          <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
            <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center space-x-2">
              <Key className="w-4 h-4 sm:w-5 sm:h-5 text-blue-600" />
              <span className="truncate">API –∫–ª—é—á OpenRouter</span>
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-xs sm:text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  API –∫–ª—é—á
                </label>
                <p className="text-xs text-gray-500 dark:text-gray-400 mb-3">
                  –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ <a href="https://openrouter.ai" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">openrouter.ai</a>
                </p>
                <input
                  type="password"
                  value={openrouterApiKey}
                  onChange={(e) => setOpenrouterApiKey(e.target.value)}
                  className="w-full p-2 sm:p-3 border border-gray-200 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                  placeholder="sk-or-v1-..."
                />
              </div>
              
              <div className="flex justify-end">
                <button
                  onClick={handleSaveApiKey}
                  disabled={savingApiKey || !openrouterApiKey.trim()}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-3 sm:px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors text-sm sm:text-base"
                >
                  {savingApiKey ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Save className="w-4 h-4" />
                  )}
                  <span>{savingApiKey ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</span>
                </button>
              </div>
            </div>
          </div>

          {/* AI Editing Settings */}
          <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
            <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center space-x-2">
              <Bot className="w-4 h-4 sm:w-5 sm:h-5 text-purple-600" />
              <span className="truncate">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</span>
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-xs sm:text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –ü—Ä–æ–º—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
                </label>
                <p className="text-xs text-gray-500 dark:text-gray-400 mb-3">
                  –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –ò–ò –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                </p>
                <textarea
                  value={editingPrompt}
                  onChange={(e) => setEditingPrompt(e.target.value)}
                  className="w-full h-24 sm:h-32 p-3 sm:p-4 border border-gray-200 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm sm:text-base"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤..."
                />
              </div>
              
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between pt-4 border-t border-gray-200 dark:border-gray-700 gap-3 sm:gap-0">
                <div className="flex items-center space-x-2 text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                  <Wand2 className="w-4 h-4 shrink-0" />
                  <span>–ü—Ä–æ–º—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>
                </div>
                
                <button
                  onClick={handleSavePrompt}
                  disabled={savingPrompt || !editingPrompt.trim()}
                  className="bg-purple-600 hover:bg-purple-700 disabled:bg-purple-400 text-white px-3 sm:px-4 py-2 rounded-lg flex items-center justify-center space-x-2 transition-colors text-sm sm:text-base shrink-0"
                >
                  {savingPrompt ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Save className="w-4 h-4" />
                  )}
                  <span>{savingPrompt ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</span>
                </button>
              </div>
            </div>
          </div>
        </>
      )}

      {activeSettingsTab === 'channels' && (
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
          <h3 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center space-x-2">
            <Radio className="w-4 h-4 sm:w-5 sm:h-5 text-green-600" />
            <span className="truncate">Telegram –∫–∞–Ω–∞–ª—ã</span>
          </h3>
          
          <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-4 sm:mb-6">
            –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã
          </p>

          {loadingChannels ? (
            <div className="flex items-center justify-center py-6 sm:py-8">
              <Loader2 className="w-5 h-5 sm:w-6 sm:h-6 text-blue-600 animate-spin mr-3" />
              <span className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...</span>
            </div>
          ) : channels.length === 0 ? (
            <div className="text-center py-6 sm:py-8">
              <Radio className="w-8 h-8 sm:w-12 sm:h-12 text-gray-400 mx-auto mb-3 sm:mb-4" />
              <h4 className="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-2">
                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
              </h4>
              <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
              </p>
            </div>
          ) : (
            <div className="space-y-3 sm:space-y-4">
              {channels.map((channel) => (
                <div
                  key={channel.id}
                  className="flex flex-col sm:flex-row sm:items-center sm:justify-between p-3 sm:p-4 border border-gray-200 dark:border-gray-600 rounded-lg gap-3 sm:gap-0"
                >
                  <div className="flex items-center space-x-3 flex-1 min-w-0">
                    <div className="w-8 h-8 sm:w-10 sm:h-10 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center shrink-0">
                      <Radio className="w-4 h-4 sm:w-5 sm:h-5 text-green-600" />
                    </div>
                    <div className="min-w-0 flex-1">
                      <h4 className="font-medium text-gray-900 dark:text-white text-sm sm:text-base truncate">
                        {channel.title}
                      </h4>
                      <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-2 text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                        {channel.username && (
                          <span className="truncate">@{channel.username}</span>
                        )}
                        {channel.participants_count && (
                          <span className="hidden sm:inline">‚Ä¢</span>
                        )}
                        {channel.participants_count && (
                          <span>{channel.participants_count.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap items-center gap-2 shrink-0">
                    <span className="px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-600 text-xs rounded-full">
                      –ê–¥–º–∏–Ω
                    </span>
                    {channel.can_post_messages && (
                      <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-600 text-xs rounded-full">
                        –ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Success/Error Message */}
      {promptMessage && (
        <div className={`rounded-xl p-4 shadow-lg ${
          promptMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
            ? 'bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800' 
            : 'bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800'
        }`}>
          <div className="flex items-center justify-between">
            <p className={`font-medium ${
              promptMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
                ? 'text-green-600 dark:text-green-400' 
                : 'text-red-600 dark:text-red-400'
            }`}>
              {promptMessage}
            </p>
            <button
              onClick={() => setPromptMessage(null)}
              className={`hover:opacity-70 ${
                promptMessage.includes('—É—Å–ø–µ—à–Ω–æ') 
                  ? 'text-green-400' 
                  : 'text-red-400'
              }`}
            >
              √ó
            </button>
          </div>
        </div>
      )}

    </div>
  );
}; 