import React, { useState, useMemo, useEffect, useCallback, useRef } from 'react';
import { 
  Search, Grid3X3, List, SortAsc, SortDesc, Bug, Calendar, Hash, 
  User, Eye, MessageCircle, Heart, Clock, MoreHorizontal, ChevronDown,
  X, RotateCcw, BookmarkPlus, Columns, Rows3, Grid2X2, Newspaper,
  LayoutList, MessageSquare, Loader2, RefreshCw, Plus, Trash2
} from 'lucide-react';
import { PostCard } from '../features/posts/components/PostCard';
import axios from 'axios';

interface Props { 
  posts: any[]; 
  onSelectPost: (post: any) => void;
  selectedPosts?: any[];
  showSelection?: boolean;
  forceViewMode?: ViewMode;
  enableInfiniteScroll?: boolean;
}

type ViewMode = 'list' | 'telegram' | 'grid' | 'compact';
type SortBy = 'date' | 'views' | 'reactions' | 'title' | 'text_length' | 'message_id';
type DateFilter = 'all' | 'today' | 'week' | 'month' | 'year';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
const API_BASE_URL = '';

export default function PostsList({ 
  posts, 
  onSelectPost, 
  selectedPosts = [], 
  showSelection = false, 
  forceViewMode, 
  enableInfiniteScroll = false 
}: Props) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [searchTerm, setSearchTerm] = useState('');
  const [searchField, setSearchField] = useState<'all' | 'text' | 'channel'>('all');
  const [internalViewMode, setInternalViewMode] = useState<ViewMode>('grid');
  const [sortBy, setSortBy] = useState<SortBy>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [dateFilter, setDateFilter] = useState<DateFilter>('all');
  const [selectedChannels, setSelectedChannels] = useState<string[]>([]);
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [showDebug, setShowDebug] = useState(false);

  // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
  const [minViews, setMinViews] = useState<number | null>(null);
  const [minReactions, setMinReactions] = useState<number | null>(null);
  const [textLengthRange, setTextLengthRange] = useState<[number, number]>([0, 10000]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è infinite scroll
  const [paginatedPosts, setPaginatedPosts] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [parsing, setParsing] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [offset, setOffset] = useState(0);
  const [totalPosts, setTotalPosts] = useState(0);
  const [isInitialized, setIsInitialized] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º forceViewMode –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ internalViewMode
  const viewMode = forceViewMode || internalViewMode;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å - –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
  const postsToUse = enableInfiniteScroll ? paginatedPosts : posts;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
  const loadMorePosts = useCallback(async () => {
    if (loading || !enableInfiniteScroll) return;

    setLoading(true);
    try {
      const response = await axios.get(
        `${API_BASE_URL}/api/posts/paginated?offset=${offset}&limit=5&random_channels=true`
      );
      
      const { posts: newPosts, has_more, total } = response.data;
      
      if (newPosts.length > 0) {
        setPaginatedPosts(prev => [...prev, ...newPosts]);
        setHasMore(has_more);
        setOffset(prev => prev + newPosts.length);
        setTotalPosts(total);
      } else if (!has_more) {
        // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        console.log('üîÑ –°–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
        
        try {
          setParsing(true);
          console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ 5 –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...');
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å—Ç–æ–≤
          const parseResponse = await axios.post(`${API_BASE_URL}/api/parse-limited`);
          
          if (parseResponse.data.status === 'success') {
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã...');
            
            // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã
            const freshResponse = await axios.get(
              `${API_BASE_URL}/api/posts/paginated?offset=0&limit=5&random_channels=true`
            );
            
            const { posts: freshPosts, has_more: freshHasMore, total: freshTotal } = freshResponse.data;
            
            if (freshPosts.length > 0) {
              // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
              const existingKeys = new Set(paginatedPosts.map((p: any) => `${p.id}-${p.channel_id}-${p.message_id}`));
              const reallyNewPosts = freshPosts.filter((p: any) => !existingKeys.has(`${p.id}-${p.channel_id}-${p.message_id}`));
              
              if (reallyNewPosts.length > 0) {
                setPaginatedPosts(prev => [...prev, ...reallyNewPosts]);
                setOffset(prev => prev + reallyNewPosts.length);
              }
              setHasMore(freshHasMore || reallyNewPosts.length === 5); // –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤
              setTotalPosts(freshTotal);
            } else {
              setHasMore(false);
            }
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseResponse.data.message);
            setHasMore(false);
          }
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', parseError);
          setHasMore(false);
        } finally {
          setParsing(false);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  }, [offset, loading, enableInfiniteScroll, paginatedPosts]);

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const clearServerData = useCallback(async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞!')) {
      return;
    }

    setLoading(true);
    try {
      // –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      const cleanupResponse = await axios.post(`${API_BASE_URL}/api/cleanup-media`);
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const clearPostsResponse = await axios.delete(`${API_BASE_URL}/api/posts/clear-all`);
      
      console.log('üßπ –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
      console.log(`üóëÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: ${cleanupResponse.data.message}`);
      console.log(`üìä –ü–æ—Å—Ç—ã: ${clearPostsResponse.data.message}`);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã
      setPaginatedPosts([]);
      setOffset(0);
      setHasMore(true);
      setTotalPosts(0);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞');
    } finally {
      setLoading(false);
    }
  }, []);

  // –°–±—Ä–æ—Å –∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è infinite scroll
  const resetPaginatedPosts = useCallback(async () => {
    if (!enableInfiniteScroll || loading || parsing) return;

    setPaginatedPosts([]);
    setOffset(0);
    setHasMore(true);
    setLoading(true);
    setIsInitialized(false);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É 10 –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
      const response = await axios.get(
        `${API_BASE_URL}/api/posts/paginated?offset=0&limit=5&random_channels=true`
      );
      
      const { posts: newPosts, has_more, total } = response.data;
      
      setPaginatedPosts(newPosts);
      setHasMore(has_more);
      setOffset(newPosts.length);
      setTotalPosts(total);
      
      if (newPosts.length === 0 && total === 0) {
        // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ 5 –ø–æ—Å—Ç–æ–≤
        console.log('üì≠ –ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ 5 –ø–æ—Å—Ç–æ–≤...');
        
        try {
          setParsing(true);
          console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ 5 –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–µ–Ω—Ç—ã...');
          
          const parseResponse = await axios.post(`${API_BASE_URL}/api/parse-limited`);
          
          if (parseResponse.data.status === 'success') {
            console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã...');
            
            // –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            const freshResponse = await axios.get(
              `${API_BASE_URL}/api/posts/paginated?offset=0&limit=5&random_channels=true`
            );
            
            const { posts: freshPosts, has_more: freshHasMore, total: freshTotal } = freshResponse.data;
            
            if (freshPosts.length > 0) {
              setPaginatedPosts(freshPosts);
              setHasMore(freshHasMore);
              setOffset(freshPosts.length);
              setTotalPosts(freshTotal);
              console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${freshPosts.length} –ø–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞`);
            }
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseResponse.data.message);
          }
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ:', parseError);
        } finally {
          setParsing(false);
        }
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
      setIsInitialized(true);
    }
  }, [enableInfiniteScroll]);



  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è infinite scroll
  useEffect(() => {
    if (enableInfiniteScroll && !isInitialized && paginatedPosts.length === 0 && !loading && !parsing) {
      resetPaginatedPosts();
    }
  }, [enableInfiniteScroll, isInitialized, paginatedPosts.length, loading, parsing, resetPaginatedPosts]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('postsListSettings');
    if (savedSettings) {
      try {
        const settings = JSON.parse(savedSettings);
        setInternalViewMode(settings.viewMode || 'grid');
        setSortBy(settings.sortBy || 'date');
        setSortOrder(settings.sortOrder || 'desc');
        setDateFilter(settings.dateFilter || 'all');
      } catch (error) {
        console.error('Error loading settings:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
  useEffect(() => {
    if (!forceViewMode) { // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º forceViewMode
      const settings = {
        viewMode: internalViewMode,
        sortBy,
        sortOrder,
        dateFilter
      };
      localStorage.setItem('postsListSettings', JSON.stringify(settings));
    }
  }, [internalViewMode, sortBy, sortOrder, dateFilter, forceViewMode]);

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  const availableChannels = useMemo(() => {
    const channels = [...new Set(postsToUse.map(p => p.channel_name || p.channel_title))].filter(Boolean);
    return channels.sort();
  }, [postsToUse]);

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const filteredAndSortedPosts = useMemo(() => {
    let filtered = postsToUse.filter(post => {
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        const textMatch = (post.text || '').toLowerCase().includes(searchLower) ||
                         (post.html || '').toLowerCase().includes(searchLower);
        const channelMatch = (post.channel_name || '').toLowerCase().includes(searchLower) ||
                            (post.channel_title || '').toLowerCase().includes(searchLower);
        
        if (searchField === 'text' && !textMatch) return false;
        if (searchField === 'channel' && !channelMatch) return false;
        if (searchField === 'all' && !textMatch && !channelMatch) return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
      if (dateFilter !== 'all') {
        const postDate = new Date(post.post_date || post.date);
        const now = new Date();
        const dayMs = 24 * 60 * 60 * 1000;
        
        switch (dateFilter) {
          case 'today':
            if (now.getTime() - postDate.getTime() > dayMs) return false;
            break;
          case 'week':
            if (now.getTime() - postDate.getTime() > 7 * dayMs) return false;
            break;
          case 'month':
            if (now.getTime() - postDate.getTime() > 30 * dayMs) return false;
            break;
          case 'year':
            if (now.getTime() - postDate.getTime() > 365 * dayMs) return false;
            break;
        }
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º
      if (selectedChannels.length > 0) {
        const postChannel = post.channel_name || post.channel_title;
        if (!selectedChannels.includes(postChannel)) return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
      if (minViews !== null && (post.views || 0) < minViews) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º
      if (minReactions !== null && (post.reactions || 0) < minReactions) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
      const textLength = (post.text || post.html || '').length;
      if (textLength < textLengthRange[0] || textLength > textLengthRange[1]) return false;

      return true;
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      let comparison = 0;
      
      switch (sortBy) {
        case 'date':
          const dateA = new Date(a.post_date || a.date || 0).getTime();
          const dateB = new Date(b.post_date || b.date || 0).getTime();
          comparison = dateA - dateB;
          break;
        case 'views':
          comparison = (a.views || 0) - (b.views || 0);
          break;
        case 'reactions':
          comparison = (a.reactions || 0) - (b.reactions || 0);
          break;
        case 'title':
          const titleA = (a.channel_name || a.channel_title || '').toLowerCase();
          const titleB = (b.channel_name || b.channel_title || '').toLowerCase();
          comparison = titleA.localeCompare(titleB);
          break;
        case 'text_length':
          const lengthA = (a.text || a.html || '').length;
          const lengthB = (b.text || b.html || '').length;
          comparison = lengthA - lengthB;
          break;
        case 'message_id':
          comparison = (a.message_id || 0) - (b.message_id || 0);
          break;
      }
      
      return sortOrder === 'asc' ? comparison : -comparison;
    });

    return filtered;
  }, [postsToUse, searchTerm, searchField, sortBy, sortOrder, dateFilter, selectedChannels, minViews, minReactions, textLengthRange]);

  const isPostSelected = (post: any) => {
    // selectedPosts –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º SelectedPost –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ Post –æ–±—ä–µ–∫—Ç–æ–≤
    return selectedPosts.some(selected => {
      // –ï—Å–ª–∏ —ç—Ç–æ SelectedPost –æ–±—ä–µ–∫—Ç —Å post_id
      if (selected.post_id) {
        return selected.post_id === post.id;
      }
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π Post –æ–±—ä–µ–∫—Ç
      return selected.id === post.id;
    });
  };

  const resetFilters = () => {
    setSearchTerm('');
    setSearchField('all');
    setDateFilter('all');
    setSelectedChannels([]);
    setMinViews(null);
    setMinReactions(null);
    setTextLengthRange([0, 10000]);
  };

  const toggleChannelFilter = (channel: string) => {
    setSelectedChannels(prev => 
      prev.includes(channel) 
        ? prev.filter(c => c !== channel)
        : [...prev, channel]
    );
  };

  const getViewModeIcon = (mode: ViewMode) => {
    switch (mode) {
      case 'grid': return <Grid3X3 className="w-5 h-5" />;
      case 'list': return <LayoutList className="w-5 h-5" />;
      case 'compact': return <Rows3 className="w-5 h-5" />;
      case 'telegram': return <MessageSquare className="w-5 h-5" />;
    }
  };

  const getViewModeClasses = () => {
    switch (viewMode) {
      case 'grid': 
        return 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6';
      case 'list': 
        return 'space-y-3 sm:space-y-4 lg:space-y-6';
      case 'compact': 
        return 'grid grid-cols-1 lg:grid-cols-2 gap-2 sm:gap-3 lg:gap-4';
      case 'telegram': 
        return 'space-y-2 sm:space-y-3 lg:space-y-4';
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-0">
        <div>
          <h2 className="text-xl sm:text-2xl lg:text-3xl font-bold bg-gradient-to-r from-tg-blue-600 to-tg-blue-800 dark:from-tg-blue-400 dark:to-tg-blue-300 bg-clip-text">
            –ü–æ—Å—Ç—ã
          </h2>
          <div className="flex items-center gap-2 sm:gap-3 mt-1 sm:mt-2">
            {enableInfiniteScroll ? (
              <>
                <span className="inline-flex items-center px-2 sm:px-3 py-1 bg-tg-blue-100 dark:bg-tg-blue-900/30 text-tg-blue-700 dark:text-tg-blue-300 rounded-full text-xs sm:text-sm font-medium">
                  –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {postsToUse.length} –∏–∑ {totalPosts}
                </span>
                <span className="inline-flex items-center px-2 sm:px-3 py-1 bg-tg-green-100 dark:bg-tg-green-900/30 text-tg-green-700 dark:text-tg-green-300 rounded-full text-xs sm:text-sm font-medium">
                  –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredAndSortedPosts.length}
                </span>
              </>
            ) : (
              <>
                <span className="inline-flex items-center px-2 sm:px-3 py-1 bg-tg-blue-100 dark:bg-tg-blue-900/30 text-tg-blue-700 dark:text-tg-blue-300 rounded-full text-xs sm:text-sm font-medium">
                  –í—Å–µ–≥–æ: {posts.length}
                </span>
                <span className="inline-flex items-center px-2 sm:px-3 py-1 bg-tg-green-100 dark:bg-tg-green-900/30 text-tg-green-700 dark:text-tg-green-300 rounded-full text-xs sm:text-sm font-medium">
                  –ù–∞–π–¥–µ–Ω–æ: {filteredAndSortedPosts.length}
                </span>
              </>
            )}
          </div>
        </div>
        
        <div className="flex flex-wrap items-center gap-2 sm:gap-3">
          <button
            onClick={resetFilters}
            className="cursor-pointer flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-1.5 sm:py-2 text-xs sm:text-sm bg-tg-gray-100 dark:bg-tg-dark-700 text-tg-gray-700 dark:text-tg-gray-300 rounded-lg sm:rounded-xl hover:bg-tg-gray-200 dark:hover:bg-tg-dark-600 transition-colors touch-optimized"
          >
            <RotateCcw className="w-3 h-3 sm:w-4 sm:h-4" />
            <span className="hidden sm:inline">–°–±—Ä–æ—Å–∏—Ç—å</span>
          </button>
          
          {enableInfiniteScroll && (
            <button
              onClick={resetPaginatedPosts}
              disabled={loading || parsing}
              className="cursor-pointer flex items-center gap-2 px-3 py-2 text-sm bg-tg-blue-100 dark:bg-tg-blue-700 text-tg-blue-700 dark:text-tg-blue-300 rounded-xl hover:bg-tg-blue-200 dark:hover:bg-tg-blue-600 transition-colors disabled:opacity-50"
            >
              {loading ? <Loader2 className="w-4 h-4 animate-spin" /> : <RotateCcw className="w-4 h-4" />}
              –û–±–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É
            </button>
          )}
          
          {showSelection && selectedPosts.length > 0 && (
            <div className="flex items-center gap-2 px-3 py-2 bg-tg-purple-100 dark:bg-tg-purple-900/30 text-tg-purple-700 dark:text-tg-purple-300 rounded-xl">
              <BookmarkPlus className="w-4 h-4" />
              –í—ã–±—Ä–∞–Ω–æ: {selectedPosts.length}
            </div>
          )}
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className="bg-white dark:bg-tg-dark-800 rounded-2xl shadow-tg-lg border border-tg-blue-100 dark:border-tg-dark-700">
        <div className="p-6 space-y-6">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="flex gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-tg-blue-400" />
              <input
                style={{ outline: 'none', border: '2px solid black' }}
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-12 pr-4 py-3 rounded-xl border border-tg-blue-100 dark:border-tg-dark-700 bg-tg-blue-50 dark:bg-tg-dark-700 text-tg-dark-800 dark:text-white placeholder-tg-blue-400 focus:border-tg-blue-500 focus:ring-2 focus:ring-tg-blue-500/20"
              />
            </div>
            
            <select
              value={searchField}
              onChange={(e) => setSearchField(e.target.value as any)}
              className="px-4 py-3 rounded-xl border border-tg-blue-100 dark:border-tg-dark-700 bg-tg-blue-50 dark:bg-tg-dark-700 text-tg-blue-700 dark:text-tg-blue-200 focus:border-tg-blue-500 focus:ring-2 focus:ring-tg-blue-500/20"
            >
              <option value="all">–í–µ–∑–¥–µ</option>
              <option value="text">–ü–æ —Ç–µ–∫—Å—Ç—É</option>
              <option value="channel">–ü–æ –∫–∞–Ω–∞–ª—É</option>
            </select>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="flex flex-wrap items-center gap-4">
            {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º */}
            <div className="flex items-center gap-2">
              <Calendar className="w-5 h-5 text-tg-blue-400" />
              <select
                value={dateFilter}
                onChange={(e) => setDateFilter(e.target.value as DateFilter)}
                className="px-3 py-2 rounded-xl border border-tg-blue-100 dark:border-tg-dark-700 bg-tg-blue-50 dark:bg-tg-dark-700 text-tg-blue-700 dark:text-tg-blue-200 text-sm focus:border-tg-blue-500"
              >
                <option value="all">–í—Å–µ –¥–∞—Ç—ã</option>
                <option value="today">–°–µ–≥–æ–¥–Ω—è</option>
                <option value="week">–ù–µ–¥–µ–ª—è</option>
                <option value="month">–ú–µ—Å—è—Ü</option>
                <option value="year">–ì–æ–¥</option>
              </select>
            </div>

            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <button
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              className={`flex items-center gap-2 px-4 py-2 rounded-xl transition-all duration-200 border ${
                showAdvancedFilters
                  ? 'bg-tg-blue-500 text-white border-tg-blue-500 shadow-tg-md'
                  : 'bg-white dark:bg-tg-dark-700 text-tg-gray-700 dark:text-tg-gray-300 border-tg-gray-200 dark:border-tg-dark-600 hover:bg-tg-blue-50 dark:hover:bg-tg-dark-600 hover:border-tg-blue-300 dark:hover:border-tg-blue-600'
              }`}
            >
              <MoreHorizontal className="w-4 h-4" />
              <span className="font-medium">–ë–æ–ª—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</span>
              <ChevronDown className={`w-4 h-4 transition-transform ${showAdvancedFilters ? 'rotate-180' : ''}`} />
            </button>
          </div>

          {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
          {showAdvancedFilters && (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 p-3 sm:p-4 bg-tg-gray-50 dark:bg-tg-dark-700 rounded-lg sm:rounded-xl">
              {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º */}
              <div>
                <label className="block text-sm font-medium text-tg-gray-700 dark:text-tg-gray-300 mb-2">
                  –ö–∞–Ω–∞–ª—ã ({selectedChannels.length} –∏–∑ {availableChannels.length})
                </label>
                <div className="max-h-32 overflow-y-auto space-y-1">
                  {availableChannels.map(channel => (
                    <label key={channel} className="flex items-center">
                      <input
                        type="checkbox"
                        checked={selectedChannels.includes(channel)}
                        onChange={() => toggleChannelFilter(channel)}
                        className="mr-2 rounded text-tg-blue-500"
                      />
                      <span className="text-sm text-tg-gray-700 dark:text-tg-gray-300 truncate">
                        {channel}
                      </span>
                    </label>
                  ))}
                </div>
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º */}
              <div>
                <label className="block text-sm font-medium text-tg-gray-700 dark:text-tg-gray-300 mb-2">
                  –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                </label>
                <input
                  type="number"
                  value={minViews || ''}
                  onChange={(e) => setMinViews(e.target.value ? Number(e.target.value) : null)}
                  placeholder="–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  className="w-full px-3 py-2 rounded-lg border border-tg-gray-200 dark:border-tg-dark-600 bg-white dark:bg-tg-dark-600 text-sm"
                />
              </div>

              {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º */}
              <div>
                <label className="block text-sm font-medium text-tg-gray-700 dark:text-tg-gray-300 mb-2">
                  –ú–∏–Ω–∏–º—É–º —Ä–µ–∞–∫—Ü–∏–π
                </label>
                <input
                  type="number"
                  value={minReactions || ''}
                  onChange={(e) => setMinReactions(e.target.value ? Number(e.target.value) : null)}
                  placeholder="–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  className="w-full px-3 py-2 rounded-lg border border-tg-gray-200 dark:border-tg-dark-600 bg-white dark:bg-tg-dark-600 text-sm"
                />
              </div>
            </div>
          )}
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-4 p-3 sm:p-4 border-t border-tg-gray-100 dark:border-tg-dark-700">
          <div className="flex flex-wrap items-center gap-2 sm:gap-4">
            {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
            <div className="flex items-center gap-2">
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as SortBy)}
                className="px-3 py-2 rounded-xl border border-tg-blue-100 dark:border-tg-dark-700 bg-tg-blue-50 dark:bg-tg-dark-700 text-tg-blue-700 dark:text-tg-blue-200 text-sm"
              >
                <option value="date">–ü–æ –¥–∞—Ç–µ</option>
                <option value="views">–ü–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º</option>
                <option value="reactions">–ü–æ —Ä–µ–∞–∫—Ü–∏—è–º</option>
                <option value="title">–ü–æ –∫–∞–Ω–∞–ª—É</option>
                <option value="text_length">–ü–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞</option>
                <option value="message_id">–ü–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è</option>
              </select>

              <button
                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                className="p-2 rounded-xl hover:bg-tg-blue-100 dark:hover:bg-tg-dark-600 transition-colors"
                title={sortOrder === 'asc' ? '–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' : '–ü–æ —É–±—ã–≤–∞–Ω–∏—é'}
              >
                {sortOrder === 'asc' ? 
                  <SortAsc className="w-5 h-5 text-tg-blue-400" /> : 
                  <SortDesc className="w-5 h-5 text-tg-blue-400" />
                }
              </button>
            </div>

            {/* –û—Ç–ª–∞–¥–∫–∞ */}
            <button
              onClick={() => setShowDebug(!showDebug)}
              className={`p-2 rounded-xl transition-colors ${
                showDebug
                  ? 'bg-tg-yellow-500 text-white'
                  : 'text-tg-gray-500 hover:bg-tg-gray-100 dark:hover:bg-tg-dark-600'
              }`}
              title="–û—Ç–ª–∞–¥–∫–∞ –º–µ–¥–∏–∞"
            >
              <Bug className="w-5 h-5" />
            </button>
          </div>

          {/* –†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          {!forceViewMode && (
            <div className="flex rounded-lg sm:rounded-xl overflow-hidden border border-tg-blue-100 dark:border-tg-dark-700 bg-tg-blue-50 dark:bg-tg-dark-700">
              {(['grid', 'list', 'compact', 'telegram'] as ViewMode[]).map((mode) => (
                <button
                  key={mode}
                  onClick={() => setInternalViewMode(mode)}
                  className={`p-1.5 sm:p-2 transition-colors touch-optimized ${
                    viewMode === mode
                      ? 'bg-tg-blue-500 text-white'
                      : 'text-tg-blue-700 dark:text-tg-blue-200 hover:bg-tg-blue-100 dark:hover:bg-tg-dark-600'
                  }`}
                  title={
                    mode === 'grid' ? '–°–µ—Ç–∫–∞' :
                    mode === 'list' ? '–°–ø–∏—Å–æ–∫' :
                    mode === 'compact' ? '–ö–æ–º–ø–∞–∫—Ç–Ω–æ' : 'Telegram-style'
                  }
                >
                  <div className="w-4 h-4 sm:w-5 sm:h-5">
                    {getViewModeIcon(mode)}
                  </div>
                </button>
              ))}
            </div>
          )}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
          {forceViewMode && (
            <div className="px-3 py-2 bg-tg-purple-100 dark:bg-tg-purple-900/30 text-tg-purple-700 dark:text-tg-purple-300 rounded-xl text-sm font-medium">
              –†–µ–∂–∏–º: {
                forceViewMode === 'grid' ? '–°–µ—Ç–∫–∞' :
                forceViewMode === 'list' ? '–°–ø–∏—Å–æ–∫' :
                forceViewMode === 'compact' ? '–ö–æ–º–ø–∞–∫—Ç–Ω–æ' : 'Telegram-style'
              }
            </div>
          )}
        </div>
      </div>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
      {(selectedChannels.length > 0 || minViews || minReactions || dateFilter !== 'all') && (
        <div className="flex flex-wrap items-center gap-2">
          <span className="text-sm text-tg-gray-600 dark:text-tg-gray-400">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</span>
          
          {selectedChannels.map(channel => (
            <span key={channel} className="inline-flex items-center gap-1 px-2 py-1 bg-tg-blue-100 dark:bg-tg-blue-900/30 text-tg-blue-700 dark:text-tg-blue-300 rounded-lg text-xs">
              <User className="w-3 h-3" />
              {channel}
              <button onClick={() => toggleChannelFilter(channel)}>
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
          
          {minViews && (
            <span className="inline-flex items-center gap-1 px-2 py-1 bg-tg-green-100 dark:bg-tg-green-900/30 text-tg-green-700 dark:text-tg-green-300 rounded-lg text-xs">
              <Eye className="w-3 h-3" />
              ‚â•{minViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
              <button onClick={() => setMinViews(null)}>
                <X className="w-3 h-3" />
              </button>
            </span>
          )}
          
          {minReactions && (
            <span className="inline-flex items-center gap-1 px-2 py-1 bg-tg-red-100 dark:bg-tg-red-900/30 text-tg-red-700 dark:text-tg-red-300 rounded-lg text-xs">
              <Heart className="w-3 h-3" />
              ‚â•{minReactions} —Ä–µ–∞–∫—Ü–∏–π
              <button onClick={() => setMinReactions(null)}>
                <X className="w-3 h-3" />
              </button>
            </span>
          )}
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {filteredAndSortedPosts.length > 0 ? (
        <>
          <div className={getViewModeClasses()}>
            {filteredAndSortedPosts.map((post, index) => (
              <div
                key={`${post.id}-${post.channel_id}-${post.message_id}-${index}`}
                className="animate-fade-in"
                style={{ animationDelay: `${index * 0.02}s` }}
              >
                <PostCard
                  post={post}
                  onSelect={() => onSelectPost(post)}
                  isSelected={showSelection && isPostSelected(post)}
                  showSelection={showSelection}
                  viewMode={viewMode}
                  allPosts={filteredAndSortedPosts}
                />
              </div>
            ))}
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è infinite scroll */}
          {enableInfiniteScroll && (
            <div className="flex flex-col items-center gap-4 py-8 pb-20">
              {(loading || parsing) ? (
                <div className="flex flex-col items-center gap-3">
                  <div className="flex items-center gap-2 text-tg-blue-600 dark:text-tg-blue-400">
                    <Loader2 className="w-6 h-6 animate-spin" />
                    <span>
                      {paginatedPosts.length === 0 && parsing
                        ? 'üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ 5 –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...'
                        : paginatedPosts.length === 0 
                          ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã...' 
                          : parsing 
                            ? 'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...'
                            : offset >= totalPosts 
                              ? 'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...'
                              : '–ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã...'
                      }
                    </span>
                  </div>
                  
                  {parsing && (
                    <div className="text-tg-gray-500 dark:text-tg-gray-400 text-center text-xs">
                      {paginatedPosts.length === 0
                        ? '‚ö° –ü–µ—Ä–≤—ã–µ –ø–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–µ–Ω—Ç—ã'
                        : '‚ö° –ü–æ—Å—Ç—ã –ø–æ—è–≤—è—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                      }
                    </div>
                  )}
                </div>
              ) : (
                <>
                  <div className="text-tg-gray-500 dark:text-tg-gray-400 text-center text-sm mb-2">
                    {paginatedPosts.length > 0 
                      ? `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${paginatedPosts.length} –ø–æ—Å—Ç–æ–≤${totalPosts > 0 ? ` –∏–∑ ${totalPosts} –≤ –±–∞–∑–µ` : ''}`
                      : parsing && totalPosts === 0
                        ? '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö 5 –ø–æ—Å—Ç–æ–≤...'
                        : totalPosts === 0 
                          ? '–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥'
                          : '–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã'
                    }
                  </div>
                  
                  <div className="flex gap-3">
                    <button
                      onClick={loadMorePosts}
                      disabled={loading || parsing}
                      className="px-6 py-3 bg-tg-blue-500 hover:bg-tg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2"
                    >
                      {paginatedPosts.length >= totalPosts ? (
                        <>
                          <RefreshCw className="w-4 h-4" />
                          –ü–∞—Ä—Å–∏—Ç—å 5 –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                        </>
                      ) : (
                        <>
                          <Plus className="w-4 h-4" />
                          –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ 5 –ø–æ—Å—Ç–æ–≤
                        </>
                      )}
                    </button>
                    
                    <button
                      onClick={clearServerData}
                      disabled={loading || parsing}
                      className="px-4 py-3 bg-tg-red-500 hover:bg-tg-red-600 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2"
                      title="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å—Ç—ã + –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã)"
                    >
                      <Trash2 className="w-4 h-4" />
                      –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                    </button>
                  </div>
                  
                  {paginatedPosts.length === 0 && totalPosts === 0 && !parsing && (
                    <div className="text-tg-gray-400 dark:text-tg-gray-500 text-center text-xs mt-2">
                      üí° –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å—è—Ç—Å—è 5 –ø–æ—Å—Ç–æ–≤
                    </div>
                  )}
                </>
              )}
            </div>
          )}
        </>
      ) : (
        <div className="text-center py-16 pb-24">
          <div className="w-20 h-20 mx-auto mb-6 bg-tg-blue-50 dark:bg-tg-dark-700 rounded-full flex items-center justify-center">
            <Search className="w-10 h-10 text-tg-blue-400" />
          </div>
          <h3 className="text-2xl font-bold text-tg-blue-900 dark:text-white mb-2">
            –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p className="text-tg-blue-600 dark:text-tg-blue-300">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
          </p>
          <button
            onClick={resetFilters}
            className="mt-4 px-4 py-2 bg-tg-blue-500 text-white rounded-xl hover:bg-tg-blue-600 transition-colors"
          >
            –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {showDebug && (
        <div className="text-sm text-tg-gray-600 dark:text-tg-gray-400 bg-tg-yellow-50 dark:bg-tg-yellow-900/20 p-4 rounded-xl mb-20">
          üêõ <strong>–û—Ç–ª–∞–¥–∫–∞:</strong> –ü–æ–∫–∞–∑–∞–Ω–æ {filteredAndSortedPosts.length} –∏–∑ {enableInfiniteScroll ? totalPosts : posts.length} –ø–æ—Å—Ç–æ–≤ | 
          –†–µ–∂–∏–º: {viewMode} | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sortBy} ({sortOrder}) | 
          –î–∞—Ç–∞: {dateFilter}
          {enableInfiniteScroll && ` | Infinite Scroll: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${postsToUse.length}, –µ—Å—Ç—å –µ—â–µ: ${hasMore}`}
        </div>
      )}
    </div>
  );
}