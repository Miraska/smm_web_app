import os
import asyncio
from datetime import datetime
from typing import Dict, Optional
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired
from sqlalchemy.orm import Session

from telegram_parser import TelegramParser
from models import User

class MultiUserTelegramManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram"""
    
    def __init__(self):
        self.user_parsers: Dict[str, TelegramParser] = {}  # phone_number -> TelegramParser
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        
    def get_session_name(self, phone_number: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = phone_number.replace('+', '').replace(' ', '').replace('-', '')
        return f"user_session_{clean_phone}"
    
    async def get_parser_for_user(self, phone_number: str) -> TelegramParser:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if phone_number not in self.user_parsers:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            parser = TelegramParser()
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–µ—Å—Å–∏–∏
            parser.session_name = self.get_session_name(phone_number)
            parser._initialized = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            
            self.user_parsers[phone_number] = parser
            
        return self.user_parsers[phone_number]
    
    async def get_current_user_parser(self, db: Session) -> Optional[TelegramParser]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ò—â–µ–º –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –ª–æ–≥–∏–Ω–æ–º
        user = db.query(User).filter(
            User.is_active == True,
            User.last_login.isnot(None)
        ).order_by(User.last_login.desc()).first()
        
        if user:
            return await self.get_parser_for_user(user.phone_number)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        if self.user_parsers:
            return list(self.user_parsers.values())[0]
        
        return None
    
    async def send_phone_code(self, phone_number: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        parser = await self.get_parser_for_user(phone_number)
        return await parser.send_phone_code(phone_number)
    
    async def verify_phone_code(self, phone_number: str, phone_code: str, phone_code_hash: str, db: Session):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ–¥ –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parser = await self.get_parser_for_user(phone_number)
        result = await parser.verify_phone_code(phone_number, phone_code, phone_code_hash)
        
        if result["status"] == "success":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                if await parser.is_authorized():
                    me = await parser.client.get_me()
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                    user = db.query(User).filter(User.phone_number == phone_number).first()
                    if not user:
                        user = User(
                            name=f"{me.first_name} {me.last_name or ''}".strip(),
                            phone_number=phone_number,
                            telegram_id=str(me.id),
                            session_file=f"sessions/{parser.session_name}.session",
                            last_login=datetime.utcnow()
                        )
                        db.add(user)
                    else:
                        user.name = f"{me.first_name} {me.last_name or ''}".strip()
                        user.telegram_id = str(me.id)
                        user.session_file = f"sessions/{parser.session_name}.session"
                        user.last_login = datetime.utcnow()
                        user.is_active = True
                    
                    db.commit()
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} ({phone_number}) –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        return result
    
    async def verify_password(self, phone_number: str, password: str, db: Session):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        parser = await self.get_parser_for_user(phone_number)
        result = await parser.verify_password(password)
        
        if result["status"] == "success":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                if await parser.is_authorized():
                    me = await parser.client.get_me()
                    
                    user = db.query(User).filter(User.phone_number == phone_number).first()
                    if user:
                        user.last_login = datetime.utcnow()
                        user.is_active = True
                        db.commit()
                        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –ø—Ä–æ—à–µ–ª –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        return result
    
    async def logout_user(self, phone_number: str, db: Session):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user = db.query(User).filter(User.phone_number == phone_number).first()
            if user:
                user.is_active = False
                db.commit()
                print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ë–î")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            if phone_number in self.user_parsers:
                parser = self.user_parsers[phone_number]
                await parser.stop()
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                session_file = f"sessions/{parser.session_name}.session"
                if os.path.exists(session_file):
                    os.remove(session_file)
                    print(f"üóëÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω: {session_file}")
                
                del self.user_parsers[phone_number]
                print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone_number} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω")
            
            return {"status": "success", "message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}"}
    
    async def get_user_channels(self, phone_number: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parser = await self.get_parser_for_user(phone_number)
        return await parser.get_user_channels()
    
    async def cleanup_inactive_sessions(self, db: Session):
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            inactive_users = db.query(User).filter(User.is_active == False).all()
            
            for user in inactive_users:
                if user.session_file and os.path.exists(user.session_file):
                    try:
                        os.remove(user.session_file)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.session_file}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ {user.session_file}: {e}")
                
                # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
                if user.phone_number in self.user_parsers:
                    try:
                        parser = self.user_parsers[user.phone_number]
                        await parser.stop()
                        del self.user_parsers[user.phone_number]
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {user.phone_number}: {e}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        for phone_number, parser in self.user_parsers.items():
            try:
                await parser.stop()
                print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–ª—è {phone_number} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {phone_number}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
multi_user_manager = MultiUserTelegramManager() 