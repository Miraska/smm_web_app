import os
import asyncio
from datetime import datetime, timezone
from typing import List, Optional
from pyrogram import Client
from pyrogram.types import Message
from pyrogram.errors import (
    SessionPasswordNeeded, 
    PhoneCodeInvalid, 
    PhoneCodeExpired,
    FloodWait,
    ChatAdminRequired,
    UsernameNotOccupied,
    PeerIdInvalid
)
from sqlalchemy.orm import Session
from dotenv import load_dotenv

from models import Source, Post
from db import get_session

load_dotenv()

class TelegramParser:
    def __init__(self):
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.session_name = "smm_bot_session"
        self.client = None
        self._initialized = False
        self._auth_cache = None
        self._auth_cache_time = None
        
    async def initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞... –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self._initialized}")
        
        if self._initialized and self.client:
            print("‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        if not self.api_id or not self.api_hash:
            raise ValueError("TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        
        print("üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π...")
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("sessions", exist_ok=True)
        
        print("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Telegram...")
        self.client = Client(
            self.session_name,
            api_id=int(self.api_id),
            api_hash=self.api_hash,
            workdir="sessions/"
        )
        self._initialized = True
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def start_session(self, phone_number: str):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not self.client:
            await self.initialize_client()
            
        try:
            if not self.client.is_connected:
                await self.client.start()
            return {"status": "success", "message": "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞"}
        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏: {str(e)}"}
    
    async def send_phone_code(self, phone_number: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"""
        print(f"üìû –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
        
        if not self.client:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç...")
            await self.initialize_client()
            
        try:
            print(f"üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")
            if not self.client.is_connected:
                print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                await self.client.connect()
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}...")
            sent_code = await self.client.send_code(phone_number)
            print(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, hash: {sent_code.phone_code_hash[:10]}...")
            
            return {
                "status": "success", 
                "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω",
                "phone_code_hash": sent_code.phone_code_hash
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}"}
    
    async def verify_phone_code(self, phone_number: str, phone_code: str, phone_code_hash: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            if not self.client:
                await self.initialize_client()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.clear_auth_cache()
            
            print(f"üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ {phone_code} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not self.client.is_connected:
                print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                await self.client.connect()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
            try:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º timeout
                signed_in = await asyncio.wait_for(
                    self.client.sign_in(phone_number, phone_code_hash, phone_code),
                    timeout=30.0  # –£–≤–µ–ª–∏—á–µ–Ω timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥
                )
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {signed_in.first_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await self.is_authorized():
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                    return {
                        "status": "success",
                        "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                        "user_info": {
                            "first_name": signed_in.first_name,
                            "last_name": signed_in.last_name,
                            "phone_number": signed_in.phone_number
                        }
                    }
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"}
                
            except asyncio.TimeoutError:
                print("‚è±Ô∏è Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞")
                return {"status": "error", "message": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
                
        except PhoneCodeExpired:
            print("‚è±Ô∏è –ö–æ–¥ –∏—Å—Ç–µ–∫")
            return {"status": "error", "message": "–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."}
        except PhoneCodeInvalid:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
        except SessionPasswordNeeded:
            print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            return {"status": "password_required", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"}
        except Exception as e:
            error_message = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {error_message}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if "PHONE_CODE_EXPIRED" in error_message:
                return {"status": "error", "message": "–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."}
            elif "PHONE_CODE_INVALID" in error_message:
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
            elif "SESSION_PASSWORD_NEEDED" in error_message:
                return {"status": "password_required", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"}
            else:
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞: {error_message}"}
    
    async def verify_password(self, password: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            if not self.client.is_connected:
                await self.client.connect()
            await self.client.check_password(password)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._auth_cache = None
            self._auth_cache_time = None
            
            return {"status": "success", "message": "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"}
        except Exception as e:
            return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {str(e)}"}
    
    async def is_authorized(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–∏–ª–∏ —Å 30 –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º)
        now = datetime.now()
        if (self._auth_cache is not None and 
            self._auth_cache_time and 
            (now - self._auth_cache_time).total_seconds() < 10):
            print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {self._auth_cache}")
            return self._auth_cache
            
        try:
            if not self.client:
                await self.initialize_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            session_file = f"sessions/{self.session_name}.session"
            if not os.path.exists(session_file):
                self._auth_cache = False
                self._auth_cache_time = now
                return False
            
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if not self.client.is_connected:
                try:
                    await self.client.connect()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    if "already terminated" in str(e).lower() or "already stopped" in str(e).lower():
                        print("üîÑ –ö–ª–∏–µ–Ω—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...")
                        self._initialized = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        await self.initialize_client()
                        try:
                            print("üîó –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
                            await self.client.connect()
                            print("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ")
                        except Exception as reinit_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {reinit_error}")
                            self._auth_cache = False
                            self._auth_cache_time = now
                            return False
                    else:
                        self._auth_cache = False
                        self._auth_cache_time = now
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(3):
                try:
                    print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ get_me()...")
                    me = await self.client.get_me()
                    if me is not None:
                        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name if hasattr(me, 'first_name') else 'Unknown'}")
                        self._auth_cache = True
                        self._auth_cache_time = now
                        return True
                    print("‚ùå get_me() –≤–µ—Ä–Ω—É–ª None")
                    self._auth_cache = False
                    self._auth_cache_time = now
                    return False
                except Exception as e:
                    error_str = str(e)
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}")
                    
                    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏
                    session_errors = [
                        "AUTH_KEY_UNREGISTERED", 
                        "AUTH_KEY_INVALID",
                        "SESSION_REVOKED",
                        "USER_DEACTIVATED",
                        "SESSION_EXPIRED"
                    ]
                    
                    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                    if any(err in error_str for err in session_errors):
                        print(f"üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏–µ–π ({error_str}), —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª...")
                        await self._reset_session()
                        self._auth_cache = False
                        self._auth_cache_time = now
                        return False
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                    connection_errors = [
                        "Connection refused",
                        "Connection reset",
                        "Network is unreachable",
                        "Timeout"
                    ]
                    
                    if any(err in error_str for err in connection_errors):
                        print(f"üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é: {error_str}")
                        if attempt < 2:
                            print(f"‚è≥ –ñ–¥–µ–º {(attempt + 1) * 2} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                            await asyncio.sleep((attempt + 1) * 2)
                            continue
                    
                    if attempt < 2:
                        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                        try:
                            print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏...")
                            await self.client.disconnect()
                            await asyncio.sleep(1)
                            await self.client.connect()
                        except Exception as reconnect_error:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {reconnect_error}")
                        await asyncio.sleep(1)
                    else:
                        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {error_str}")
                        self._auth_cache = False
                        self._auth_cache_time = now
                        return False
                        
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self._auth_cache = False
            self._auth_cache_time = now
            return False
    
    async def get_user_channels(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.client:
                await self.initialize_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.is_authorized():
                return {"status": "error", "message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram"}
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not self.client.is_connected:
                await self.client.connect()
            
            channels = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async for dialog in self.client.get_dialogs():
                chat = dialog.chat
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                if chat.type.name in ['CHANNEL', 'SUPERGROUP']:
                    channel_info = {
                        "id": str(chat.id),
                        "title": chat.title,
                        "username": getattr(chat, 'username', None),
                        "type": chat.type.name.lower(),
                        "members_count": getattr(chat, 'members_count', None),
                        "is_creator": getattr(dialog, 'is_creator', False),
                        "is_admin": getattr(dialog, 'is_admin', False),
                        "can_send_messages": getattr(chat, 'can_send_messages', True)
                    }
                    channels.append(channel_info)
            
            return {
                "status": "success",
                "channels": channels,
                "total": len(channels)
            }
            
        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}"}
    
    async def get_channel_info(self, channel_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not self.client.is_connected:
                await self.client.connect()
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –ø–æ ID
            chat = await self.client.get_chat(channel_id)
            
            print(f"–ù–∞–π–¥–µ–Ω —á–∞—Ç: {chat.title}, —Ç–∏–ø: {chat.type}")
            
            return {
                "id": chat.id,
                "title": chat.title,
                "username": getattr(chat, 'username', None),
                "type": str(chat.type),
                "member_count": getattr(chat, 'members_count', 0),
                "description": getattr(chat, 'description', None)
            }
        except (UsernameNotOccupied, PeerIdInvalid) as e:
            print(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ get_chat: {e}")
            
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            try:
                channels_response = await self.get_user_channels()
                if channels_response["status"] == "success":
                    for channel in channels_response["channels"]:
                        if str(channel["id"]) == str(channel_id):
                            print(f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {channel['title']}")
                            return {
                                "id": channel["id"],
                                "title": channel["title"],
                                "username": channel.get("username"),
                                "type": channel.get("type", "channel"),
                                "member_count": channel.get("members_count", 0),
                                "description": None
                            }
                print(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return None
            except Exception as fallback_error:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {fallback_error}")
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    async def parse_channel_posts(self, channel_id: str, limit: int = 50, until_date=None, offset: int = 0):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_id} —Å –ª–∏–º–∏—Ç–æ–º {limit}")
        print(f"üîç until_date = {until_date} (—Ç–∏–ø: {type(until_date).__name__})")
        if until_date:
            print(f"‚è∞ –ü–∞—Ä—Å–∏–º –¥–æ –¥–∞—Ç—ã: {until_date}")
        else:
            print(f"‚è∞ –ü–∞—Ä—Å–∏–º –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ")
        if offset > 0:
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ {offset} –ø–æ—Å—Ç–æ–≤")
        
        try:
            if not self.client:
                await self.initialize_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.is_authorized():
                print(f"‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return {"status": "error", "message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram"}
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not self.client.is_connected:
                print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                await self.client.connect()
            
            posts_data = []
            processed_albums = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            print(f"üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_id}")
            channel_info = await self.get_channel_info(channel_id)
            if not channel_info:
                print(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"status": "error", "message": f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
            media_dir = os.path.abspath(f"../frontend/public/media/{channel_id.replace('-', '')}")
            os.makedirs(media_dir, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞: {media_dir}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message_count = 0
            skipped_count = 0
            print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞ offset —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
                total_limit = limit + offset
                async for message in self.client.get_chat_history(channel_id, limit=total_limit):
                    try:
                        message_count += 1
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ offset —Å–æ–æ–±—â–µ–Ω–∏–π
                        if skipped_count < offset:
                            skipped_count += 1
                            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {skipped_count}/{offset}: {message.id}")
                            continue
                        
                        # –ï—Å–ª–∏ —É–∂–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                        if len(posts_data) >= limit:
                            print(f"üî¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {limit} –ø–æ—Å—Ç–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                            break
                        
                        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ until_date (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
                        if until_date is not None and message.date <= until_date:
                            print(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç {message.id} (–¥–∞—Ç–∞ {message.date} <= {until_date})")
                            continue
                        
                        print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {len(posts_data)+1}/{limit}: {message.id}")
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        text = message.text or message.caption or ""
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º—ã (–≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞)
                        if hasattr(message, 'media_group_id') and message.media_group_id:
                            if message.media_group_id not in processed_albums:
                                print(f"üéûÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º: {message.media_group_id}")
                                album_posts = await self._parse_album(message, channel_info, media_dir, channel_id)
                                posts_data.extend(album_posts)
                                processed_albums.add(message.media_group_id)
                            continue
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        media_info = await self._parse_media(message, media_dir, channel_id)
                        
                        # –í–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –¥–∞–∂–µ –±–µ–∑ –º–µ–¥–∏–∞
                        if not text.strip() and not media_info:
                            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
                            continue
                        
                        post_data = {
                            "message_id": message.id,
                            "channel_id": str(channel_info["id"]),
                            "channel_name": channel_info["title"],
                            "text": text,
                            "media_type": media_info.get("type") if media_info else None,
                            "media_url": media_info.get("url") if media_info else None,
                            "post_date": message.date,
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
                        if media_info:
                            post_data.update({
                                "media_size": media_info.get("size"),
                                "media_filename": media_info.get("filename"),
                                "media_duration": media_info.get("duration"),
                                "media_width": media_info.get("width"),
                                "media_height": media_info.get("height"),
                            })
                        
                        posts_data.append(post_data)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç {message.id}, —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, –º–µ–¥–∏–∞: {media_info.get('type') if media_info else '–Ω–µ—Ç'}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {channel_id}: {e}")
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"}
                
            print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return {
                "status": "success", 
                "message": f"–°–ø–∞—Ä—Å–µ–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['title']}",
                "posts": posts_data,
                "channel_info": channel_info
            }
            
        except FloodWait as e:
            wait_time = e.value
            print(f"‚è≥ Rate limit –æ—Ç Telegram: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥")
            if wait_time <= 60:  # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
                print(f"‚è±Ô∏è –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                try:
                    return await self.parse_channel_posts(channel_id, limit, until_date, offset)
                except Exception as retry_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {retry_error}")
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è rate limit: {str(retry_error)}"}
            else:
                return {"status": "error", "message": f"Rate limit —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {wait_time} —Å–µ–∫—É–Ω–¥"}
        except ChatAdminRequired:
            return {"status": "error", "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"}
        except Exception as e:
            error_str = str(e)
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {error_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            auth_errors = [
                "AUTH_KEY_UNREGISTERED", 
                "AUTH_KEY_INVALID",
                "SESSION_REVOKED",
                "USER_DEACTIVATED"
            ]
            
            if any(err in error_str for err in auth_errors):
                print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {error_str}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self._auth_cache = None
                self._auth_cache_time = None
                return {"status": "error", "message": f"–ü–æ—Ç–µ—Ä—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_str}"}
            
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {error_str}"}

    async def _parse_media(self, message: Message, media_dir: str, channel_id: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            media_info = None
            channel_clean = channel_id.replace('-', '')
            
            if message.photo:
                # –§–æ—Ç–æ
                try:
                    file_path = await self.client.download_media(
                        message.photo,
                        file_name=f"{media_dir}/photo_{message.id}.jpg"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        media_info = {
                            "type": "photo",
                            "url": f"/media/{channel_clean}/photo_{message.id}.jpg",
                            "filename": f"photo_{message.id}.jpg",
                            "width": getattr(message.photo, 'width', None),
                            "height": getattr(message.photo, 'height', None),
                            "size": getattr(message.photo, 'file_size', None)
                        }
                        print(f"–°–∫–∞—á–∞–Ω–æ —Ñ–æ—Ç–æ: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        # –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        temp_file = f"{media_dir}/photo_{message.id}.jpg"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {message.id}: {e}")
                
            elif message.video:
                # –í–∏–¥–µ–æ
                try:
                    file_extension = "mp4"
                    if hasattr(message.video, 'mime_type') and message.video.mime_type:
                        ext_map = {"video/mp4": "mp4", "video/mov": "mov", "video/avi": "avi", "video/webm": "webm"}
                        file_extension = ext_map.get(message.video.mime_type, "mp4")
                    
                    video_size = getattr(message.video, 'file_size', 0)
                    print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ {message.id}, –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {video_size} –±–∞–π—Ç")
                    
                    file_path = await self.client.download_media(
                        message.video,
                        file_name=f"{media_dir}/video_{message.id}.{file_extension}"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        actual_size = os.path.getsize(file_path)
                        media_info = {
                            "type": "video",
                            "url": f"/media/{channel_clean}/video_{message.id}.{file_extension}",
                            "filename": f"video_{message.id}.{file_extension}",
                            "duration": getattr(message.video, 'duration', None),
                            "width": getattr(message.video, 'width', None),
                            "height": getattr(message.video, 'height', None),
                            "size": video_size
                        }
                        print(f"–°–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {actual_size} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        # –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        temp_file = f"{media_dir}/video_{message.id}.{file_extension}"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ {message.id}: {e}")
                
            elif message.animation:
                # GIF –∞–Ω–∏–º–∞—Ü–∏—è
                try:
                    file_path = await self.client.download_media(
                        message.animation,
                        file_name=f"{media_dir}/animation_{message.id}.gif"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        media_info = {
                            "type": "animation",
                            "url": f"/media/{channel_clean}/animation_{message.id}.gif",
                            "filename": f"animation_{message.id}.gif",
                            "duration": getattr(message.animation, 'duration', None),
                            "width": getattr(message.animation, 'width', None),
                            "height": getattr(message.animation, 'height', None),
                            "size": getattr(message.animation, 'file_size', None)
                        }
                        print(f"–°–∫–∞—á–∞–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        temp_file = f"{media_dir}/animation_{message.id}.gif"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ {message.id}: {e}")
                
            elif message.voice:
                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    file_path = await self.client.download_media(
                        message.voice,
                        file_name=f"{media_dir}/voice_{message.id}.ogg"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        media_info = {
                            "type": "voice",
                            "url": f"/media/{channel_clean}/voice_{message.id}.ogg",
                            "filename": f"voice_{message.id}.ogg",
                            "duration": getattr(message.voice, 'duration', None),
                            "size": getattr(message.voice, 'file_size', None)
                        }
                        print(f"–°–∫–∞—á–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        temp_file = f"{media_dir}/voice_{message.id}.ogg"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ {message.id}: {e}")
                
            elif message.audio:
                # –ê—É–¥–∏–æ —Ñ–∞–π–ª
                try:
                    file_extension = "mp3"
                    if hasattr(message.audio, 'mime_type') and message.audio.mime_type:
                        ext_map = {"audio/mpeg": "mp3", "audio/mp4": "m4a", "audio/ogg": "ogg"}
                        file_extension = ext_map.get(message.audio.mime_type, "mp3")
                    
                    file_path = await self.client.download_media(
                        message.audio,
                        file_name=f"{media_dir}/audio_{message.id}.{file_extension}"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        media_info = {
                            "type": "audio",
                            "url": f"/media/{channel_clean}/audio_{message.id}.{file_extension}",
                            "filename": f"audio_{message.id}.{file_extension}",
                            "duration": getattr(message.audio, 'duration', None),
                            "title": getattr(message.audio, 'title', None),
                            "performer": getattr(message.audio, 'performer', None),
                            "size": getattr(message.audio, 'file_size', None)
                        }
                        print(f"–°–∫–∞—á–∞–Ω–æ –∞—É–¥–∏–æ: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        temp_file = f"{media_dir}/audio_{message.id}.{file_extension}"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ {message.id}: {e}")
                
            elif message.document:
                # –î–æ–∫—É–º–µ–Ω—Ç
                try:
                    file_name = getattr(message.document, 'file_name', None) or f"document_{message.id}"
                    # –£–±–∏—Ä–∞–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    safe_file_name = "".join(c for c in file_name if c.isalnum() or c in ".-_").rstrip()
                    
                    file_path = await self.client.download_media(
                        message.document,
                        file_name=f"{media_dir}/{safe_file_name}"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        media_info = {
                            "type": "document",
                            "url": f"/media/{channel_clean}/{safe_file_name}",
                            "filename": safe_file_name,
                            "mime_type": getattr(message.document, 'mime_type', None),
                            "size": getattr(message.document, 'file_size', None)
                        }
                        print(f"–°–∫–∞—á–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        temp_file = f"{media_dir}/{safe_file_name}"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {message.id}: {e}")
                
            elif message.sticker:
                # –°—Ç–∏–∫–µ—Ä
                try:
                    file_extension = "webp"
                    if hasattr(message.sticker, 'is_animated') and message.sticker.is_animated:
                        file_extension = "tgs"
                    elif hasattr(message.sticker, 'is_video') and message.sticker.is_video:
                        file_extension = "webm"
                        
                    file_path = await self.client.download_media(
                        message.sticker,
                        file_name=f"{media_dir}/sticker_{message.id}.{file_extension}"
                    )
                    if file_path and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        media_info = {
                            "type": "sticker",
                            "url": f"/media/{channel_clean}/sticker_{message.id}.{file_extension}",
                            "filename": f"sticker_{message.id}.{file_extension}",
                            "is_animated": getattr(message.sticker, 'is_animated', False),
                            "is_video": getattr(message.sticker, 'is_video', False),
                            "emoji": getattr(message.sticker, 'emoji', None),
                            "size": getattr(message.sticker, 'file_size', None)
                        }
                        print(f"–°–∫–∞—á–∞–Ω —Å—Ç–∏–∫–µ—Ä: {file_path}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ {message.id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                        temp_file = f"{media_dir}/sticker_{message.id}.{file_extension}"
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ {message.id}: {e}")
            
            return media_info
            
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            return None

    async def _parse_album(self, message: Message, channel_info: dict, media_dir: str, channel_id: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∞–ª—å–±–æ–º–∞ (–≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤)"""
        try:
            print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞–ª—å–±–æ–º–∞ {message.media_group_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–ª—å–±–æ–º–∞
            album_messages = []
            
            # –ò—â–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ media_group_id (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫)
            async for msg in self.client.get_chat_history(message.chat.id, limit=100):
                if (hasattr(msg, 'media_group_id') and 
                    msg.media_group_id == message.media_group_id):
                    album_messages.append(msg)
                    
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏ –¥–æ—à–ª–∏ –¥–æ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(album_messages) >= 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∞–ª—å–±–æ–º–µ
                    break
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
            album_messages.sort(key=lambda x: x.id)
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(album_messages)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∞–ª—å–±–æ–º–µ")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–ª—å–±–æ–º–∞
            album_posts = []
            album_text = ""
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
            for msg in album_messages:
                msg_text = msg.text or msg.caption or ""
                if msg_text and not album_text:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                    album_text = msg_text
            
            for i, msg in enumerate(album_messages):
                media_info = await self._parse_media(msg, media_dir, channel_id)
                
                post_data = {
                    "message_id": msg.id,
                    "channel_id": str(channel_info["id"]),
                    "channel_name": channel_info["title"],
                    "text": album_text,  # –í–µ—Å—å —Ç–µ–∫—Å—Ç –∞–ª—å–±–æ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    "media_type": media_info.get("type") if media_info else None,
                    "media_url": media_info.get("url") if media_info else None,
                    "post_date": msg.date,
                    "album_id": message.media_group_id,
                    "album_position": i + 1,
                    "album_total": len(album_messages)
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
                if media_info:
                    post_data.update({
                        "media_size": media_info.get("size"),
                        "media_filename": media_info.get("filename"),
                        "media_duration": media_info.get("duration"),
                        "media_width": media_info.get("width"),
                        "media_height": media_info.get("height"),
                    })
                
                album_posts.append(post_data)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞–ª—å–±–æ–º–∞ {i+1}/{len(album_messages)}: {msg.id}")
            
            print(f"–ê–ª—å–±–æ–º {message.media_group_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(album_posts)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return album_posts
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞ {message.media_group_id}: {e}")
            return []
    
    async def parse_all_sources(self, db: Session):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if not await self.is_authorized():
            return {"status": "error", "message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = db.query(Source).filter(Source.is_active == True).all()
        if not sources:
            return {"status": "error", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"}
        
        total_posts = 0
        results = []
        
        for source in sources:
            try:
                # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
                result = await self.parse_channel_posts(source.channel_id, limit=5)
                
                if result["status"] == "success":
                    posts_data = result["posts"]
                    new_posts = 0
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    for post_data in posts_data:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = db.query(Post).filter(
                                Post.channel_id == post_data["channel_id"],
                                Post.message_id == post_data["message_id"]
                            ).first()
                            
                            if not existing_post:
                                new_post = Post(**post_data)
                                db.add(new_post)
                                new_posts += 1
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')} –∏–∑ –∫–∞–Ω–∞–ª–∞ {source.channel_name}: {e}")
                            continue
                    
                    try:
                        db.commit()
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {source.channel_name}: {e}")
                        db.rollback()
                        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
                        new_posts = 0
                        for post_data in posts_data:
                            try:
                                existing_post = db.query(Post).filter(
                                    Post.channel_id == post_data["channel_id"],
                                    Post.message_id == post_data["message_id"]
                                ).first()
                                
                                if not existing_post:
                                    new_post = Post(**post_data)
                                    db.add(new_post)
                                    db.commit()
                                    new_posts += 1
                            except Exception as post_error:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')} –∏–∑ –∫–∞–Ω–∞–ª–∞ {source.channel_name}: {post_error}")
                                db.rollback()
                                continue
                    
                    total_posts += new_posts
                    
                    results.append({
                        "channel": source.channel_name,
                        "status": "success",
                        "new_posts": new_posts,
                        "total_parsed": len(posts_data)
                    })
                else:
                    results.append({
                        "channel": source.channel_name,
                        "status": "error",
                        "message": result["message"]
                    })
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                results.append({
                    "channel": source.channel_name,
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞: {str(e)}"
                })
        
        return {
            "status": "success",
            "message": f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {total_posts} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤",
            "total_new_posts": total_posts,
            "results": results
        }
    
    async def parse_all_sources_limited(self, db: Session, limit: int = 5):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤)"""
        if not await self.is_authorized():
            return {"status": "error", "message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = db.query(Source).filter(Source.is_active == True).all()
        if not sources:
            return {"status": "error", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"}
        
        total_posts = 0
        results = []
        posts_found = 0
        
        for source in sources:
            try:
                # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å—Ç–æ–≤
                result = await self.parse_channel_posts(source.channel_id, limit=limit)
                
                if result["status"] == "success":
                    posts_data = result["posts"]
                    new_posts = 0
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    for post_data in posts_data:
                        if posts_found >= limit:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            break
                            
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                            existing_post = db.query(Post).filter(
                                Post.channel_id == post_data["channel_id"],
                                Post.message_id == post_data["message_id"]
                            ).first()
                            
                            if not existing_post:
                                new_post = Post(**post_data)
                                db.add(new_post)
                                db.commit()  # –ö–æ–º–º–∏—Ç–∏–º —Å—Ä–∞–∑—É –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                                new_posts += 1
                                posts_found += 1
                                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å—Ç {post_data.get('message_id')} –∏–∑ {source.channel_name}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')}: {e}")
                            db.rollback()
                            continue
                    
                    total_posts += new_posts
                    
                    results.append({
                        "channel": source.channel_name,
                        "status": "success",
                        "new_posts": new_posts,
                        "total_parsed": len(posts_data)
                    })
                else:
                    results.append({
                        "channel": source.channel_name,
                        "status": "error",
                        "message": result["message"]
                    })
                
                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
                if posts_found >= limit:
                    break
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                results.append({
                    "channel": source.channel_name,
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞: {str(e)}"
                })
        
        return {
            "status": "success",
            "message": f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {total_posts} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤",
            "total_new_posts": total_posts,
            "results": results
        }
    
    async def stop(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"""
        try:
            if self.client and hasattr(self.client, 'is_connected'):
                if self.client.is_connected:
                    print("üîå –û—Ç–∫–ª—é—á–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç...")
                    await self.client.stop()
                    print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                else:
                    print("‚ÑπÔ∏è Telegram –∫–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω")
            else:
                print("‚ÑπÔ∏è Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            if "already terminated" in str(e).lower() or "already stopped" in str(e).lower():
                print("‚ÑπÔ∏è Telegram –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                raise

    async def _reset_session(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            if self.client and hasattr(self.client, 'is_connected'):
                try:
                    if self.client.is_connected:
                        await self.client.stop()
                except:
                    pass
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            session_file = f"sessions/{self.session_name}.session"
            if os.path.exists(session_file):
                try:
                    os.remove(session_file)
                    print(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} —É–¥–∞–ª–µ–Ω")
                except Exception as remove_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {remove_error}")
            
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            print("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏...")
            self._initialized = False
            await self.initialize_client()
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏: {e}")

    def clear_auth_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏"""
        self._auth_cache = None
        self._auth_cache_time = None
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        try:
            session_file = f"sessions/{self.session_name}.session"
            if os.path.exists(session_file):
                os.remove(session_file)
                print(f"üóëÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω: {session_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
telegram_parser = TelegramParser() 